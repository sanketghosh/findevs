// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JobType {
  FullTime
  PartTime
  Internship
  Contract
}

enum Workplace {
  Remote
  Hybrid
  OnSite
}

enum Seniority {
  EntryLevel
  MidLevel
  Senior
  Manager
  Director
  Executive
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  sessions      Session[]
  accounts      Account[]
  jobs          Job[]
  bookmarks     Bookmark[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Job {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  description     String
  companyName     String
  jobType         JobType
  workplace       Workplace
  seniority       Seniority
  location        String?
  employerEmail   String?
  employerWebsite String?
  salary          Int
  companyLogoUrl  String?
  approved        Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  bookmarks Bookmark[]

  @@map("jobs")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId  String
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
  @@map("bookmarks")
}
